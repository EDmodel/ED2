# Makefile include include.mk.opt

# Define make (gnu make works best).
MAKE=/usr/bin/make

# libraries.
BASE=$(ED_ROOT)/build/

# HDF 5  Libraries
# For 64-bit
HDF5_INCS=
HDF5_LIBS=-lhdf5 -lm -lhdf5_fortran -lhdf5 -lhdf5_hl -lz
USE_COLLECTIVE_MPIO=1
------------------------------------------------------------------------------------#


#------------------------------------------------------------------------------------------#
#     Linear Algebra Package (LAPACK) libraries.                                           #
#                                                                                          #
#     Lapack is a well-established package for solving linear systems in Fortran. This is  #
# more efficient than the former built-in solution, and thus it became the new default.    #
# Consequently, it is now required to link the lapack libraries during compilation.        #
#------------------------------------------------------------------------------------------#
LAPACK_PATH=/usr/local/opt/lapack
LAPACK_INCS=-I$(LAPACK_PATH)/include
LAPACK_LIBS=-L$(LAPACK_PATH)/lib -llapack -lblas
#------------------------------------------------------------------------------------------#

# interface ----------------------------------------------------
# This should be 1 unless you are running with -gen-interfaces.
# Interfaces usually make the compilation to crash when the
# -gen-interfaces option are on, so this flag bypass all
# interfaces in the code.
USE_INTERF=1

# MPI_Wtime. ---------------------------------------------------
# If USE_MPIWTIME=1, then it will use MPI libraries to compute
# the wall time (the only double-precision intrinsic).  In case
# you don't have it, leave USE_MPIWTIME=0, in which case it will
# use a simpler, single-precision function.
USE_MPIWTIME=1

# Compile flags ------------------------------------------------
CMACH=PC_LINUX1
FC_TYPE=GNU
F_COMP=mpif90
C_COMP=mpicc
LOADER=mpif90
#F_COMP = gfortran
#C_COMP = gcc
#LOADER = gfortran

##################################### COMPILER OPTIONS #####################################
#------------------------------------------------------------------------------------------#
# A/B/C/D. Debugging, strictest compilation flags, lowest performance.                     #
# E.       Running, most relaxed compilation flags, highest performance.                   #
#------------------------------------------------------------------------------------------#
ifeq ($(KIND_COMP),)
   KIND_COMP=E
endif
ifeq ($(KIND_COMP),$(filter $(KIND_COMP), A B C D))
   F_OPTS= -g -fopenmp -O0 -Wall -W -ffpe-trap=invalid,zero,overflow -Wconversion          \
           -fbounds-check -fbacktrace -fdump-core
   C_OPTS = -g -fopenmp -O0 -ffpe-trap=invalid,zero,overflow -fbounds-check
   LOADER_OPTS=${F_OPTS}
endif
ifeq ($(KIND_COMP),E)
   F_OPTS= -fopenmp -g -Wall -W -ffpe-trap=invalid,zero,overflow -Wconversion -fbounds-check -fbacktrace -fdump-core
   #F_OPTS= -V -FR -O2 -recursive -static -Vaxlib  -check all -g -fpe0 -ftz  -debug extended \
   #        -debug inline_debug_info -debug-parameters all -traceback -ftrapuv
   #F_OPTS= -03
   C_OPTS = -fopenmp -O3 -DLITTLE
   #C_OPTS= -O2 -DLITTLE  -g -static -traceback -debug extended
   LOADER_OPTS=${F_OPTS}
endif




LIBS=
MOD_EXT=mod

# MPI Flags ----------------------------------------------------
MPI_PATH=
PAR_INCS=
PAR_LIBS=
PAR_DEFS=-DRAMS_MPI

# For IBM,HP,SGI,ALPHA,LINUX use these:
ARCHIVE=ar rs

