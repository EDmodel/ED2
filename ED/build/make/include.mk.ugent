#==========================================================================================#
#==========================================================================================#
#    Makefile include.intel.mk                                                             #
#                                                                                          #
#    Compilation controls optimised for Gent Univeristy Cluster                            #
#------------------------------------------------------------------------------------------#

#----- Define make (gnu make works best). -------------------------------------------------#
MAKE=/usr/bin/make
#------------------------------------------------------------------------------------------#


#----- Main path for compilation. ---------------------------------------------------------#
BASE=$(ED_ROOT)/build/
#------------------------------------------------------------------------------------------#


#------ Detect current system. -----------------------------------------------------------#
UNAME_S := $(shell uname -s)
#------------------------------------------------------------------------------------------#


#------------------------------------------------------------------------------------------#
#    HDF 5 libraries.                                                                      #
#                                                                                          #
#    Since ED-2.1, this is no longer optional for real simulations.  You must have the     #
# HDF5 libraries compiled with the same compiler you set for F_COMP and C_COMP.  You may   #
# still be able to compile without HDF5 but the code is not going to run.                  #
#------------------------------------------------------------------------------------------#
ifeq ($(UNAME_S),Linux)
	HDF5_LIBS=-lz -lm -lhdf5 -lhdf5_fortran -lhdf5_hl
endif
ifeq ($(UNAME_S),Darwin)
	HDF5_INCS=-I/usr/local/hdf5_mio/include
	HDF5_LIBS=-lm -lz -L/usr/local/hdf5_mio/lib -lhdf5 -lhdf5_fortran -lhdf5_hl
endif
#------------------------------------------------------------------------------------------#


#------------------------------------------------------------------------------------------#
#     Linear Algebra Package (LAPACK) libraries.                                           #
#                                                                                          #
#     Lapack is a well-established package for solving linear systems in Fortran. This is  #
# more efficient than the former built-in solution, and thus it became the new default.    #
# Consequently, it is now required to link the lapack libraries during compilation.        #
#------------------------------------------------------------------------------------------#
ifeq ($(UNAME_S),Linux)
   LAPACK_INCS=
	LAPACK_LIBS=-llapack -lblas
endif
ifeq ($(UNAME_S),Darwin)
	LAPACK_PATH=/usr/local/lapack-X.X.X
	LAPACK_INCS=-I$(LAPACK_PATH)/include
	LAPACK_LIBS=-L$(LAPACK_PATH)/lib -llapack -lblas
endif
#------------------------------------------------------------------------------------------#



#################################### COMPILER SETTINGS #####################################
CMACH=PC_INTEL
FC_TYPE=INTEL
F_COMP=ifort
C_COMP=icc
LOADER=ifort
LIBS=
MOD_EXT=mod
#------------------------------------------------------------------------------------------#



##################################### COMPILER OPTIONS #####################################
#------------------------------------------------------------------------------------------#
# A/B. Pickiest - Use this whenever you change arguments on functions and subroutines.     #
#                 This will perform the same tests as B but it will also check whether all #
#                 arguments match between subroutine declaration and subroutine calls.     #
#                 WARNING: In order to really check all interfaces you must compile with   #
#                          this option twice:                                              #
#                 1. Compile (./install.sh A)                                              #
#                 2. Prepare second compilation(./2ndcomp.sh)                              #
#                 3. Compile one more time (./install.sh B)                                #
#                 If the compilation fails either at step 3, then your code has interface  #
#                 problems. If it successfully compiles, then the code is fine for         #
#                 interfaces.                                                              #
# C. Pickiest with no interface - This will compile fast but the run will be slow due to   #
#    the -O0 option. However, by setting -O0 you will take full advantage of the intel     #
#    debugger.                                                                             #
#    Ideally, you should compile your code with this option whenever you make any changes. #
#    Note, however, that if you change arguments you should first try A.                   #
# D. Fast check - This will check pretty much the same as C, but it will not set up        #
#    anything for the debugger. Use this only if you really don't want to deal with idb or #
#    if you have a good idea of which problem you are dealing with.                        #
# E. Fast - This is all about performance, use only when you are sure that the model has   #
#           no code problem, and you want results asap. This will not check for any        #
#           problems, which means that this is an option suitable for end users, not de-   #
#           velopers.                                                                      #
#------------------------------------------------------------------------------------------#
ifeq ($(KIND_COMP),)
	KIND_COMP=E
endif
#------------------------------------------------------------------------------------------#
#################################    DEBUG BUILD   #########################################
ifeq ($(KIND_COMP),A)
	USE_INTERF=0
	F_OPTS= -FR -O0 -check -g -debug extended -debug-parameters -traceback -ftrapuv -u      \
			-fp-stack-check -assume byterecl -warn unused -warn uncalled -gen-interfaces
	C_OPTS= -O0 -g -traceback
	#---------------------------------------------------------------------------------------#
endif
############################   LEGACY DEBUG BUILD   #########################################
ifeq ($(KIND_COMP),B)
	USE_INTERF=0
	F_OPTS= -FR -O0 -recursive  -check all -g -debug extended -debug-parameters used        \
			-fpe0 -no-ftz -traceback -ftrapuv -fp-stack-check -implicitnone                 \
			-assume byterecl -warn unused -warn uncalled -warn usage -gen-interfaces
	C_OPTS= -O0 -DLITTLE  -g -traceback
	#---------------------------------------------------------------------------------------#
endif
########################   DEBUG BUILD WITH INTEL PROFILING   ###############################
ifeq ($(KIND_COMP),C)
	USE_INTERF=0
	F_OPTS= -O0 -check -g -prof-gen=srcpos -debug extended -debug-parameters -traceback -u  \
			-ftrapuv -fp-stack-check -assume byterecl -gen-interfaces
	C_OPTS= -O0 -g -traceback
	#---------------------------------------------------------------------------------------#
endif
############################### LEGACY OPTIMIZED BUILD   ####################################
ifeq ($(KIND_COMP),D)
	USE_INTERF=1
	F_OPTS= -FR -O3 -recursive -traceback -assume byterecl
	C_OPTS= -O3 -DLITTLE -traceback
	F_LOWO_OPTS=-FR -O2 -recursive -traceback -assume byterecl
	#---------------------------------------------------------------------------------------#
endif
######################################   OPTIMIZED BUILD   ##################################
ifeq ($(KIND_COMP),E)
	USE_INTERF=1
	F_OPTS= -O3 -xHost -g -assume byterecl
	C_OPTS= -O3 -xHost -g
	F_LOWO_OPTS= -O2 -xHost -g
	#---------------------------------------------------------------------------------------#
endif
###########################   OPTIMIZED BUILD WITH OpenMP   #################################
ifeq ($(KIND_COMP),F)
	USE_INTERF=1
	F_OPTS= -O3 -xHost -g -assume byterecl -qopenmp
	C_OPTS= -O3 -xHost -g -qopenmp
	F_LOWO_OPTS= -O2 -xHost -g -qopenmp
	#---------------------------------------------------------------------------------------#
endif
#------------------------------------------------------------------------------------------#
############################################################################################



#------------------------------------------------------------------------------------------#
#     If you have a version of hdf5 compiled in parallel, then you may benefit from        #
# collective I/O, then use this flag = 1.  Otherwise, set it to zero.                      #
#------------------------------------------------------------------------------------------#
USE_COLLECTIVE_MPIO=0
#------------------------------------------------------------------------------------------#


#------------------------------------------------------------------------------------------#
#     If using mpicc and mpif90 as compilers (recommended), leave MPI_PATH, PAR_INCS, and  #
# PAR_LIBS blank, otherwise provide the includes and libraries for mpi.  Either way, don't #
# change PAR_DEFS unless you know what you are doing.                                      #
#------------------------------------------------------------------------------------------#
MPI_PATH=
PAR_INCS=
PAR_LIBS=
PAR_DEFS=
#------------------------------------------------------------------------------------------#



#------------------------------------------------------------------------------------------#
#     Archive options.                                                                     #
#------------------------------------------------------------------------------------------#
ifeq ($(UNAME_S),Linux)
	ARCHIVE=ar rs
endif
ifeq ($(UNAME_S),Darwin)
	ARCHIVE=libtool -c -static -o
endif
#------------------------------------------------------------------------------------------#


